from QuantumSystem import *
from ZX_CGP import *

#Super class declaring 2 key methods
class Individual_Builder:
    def initialize_individual(self):
        return [None]

    def build_qsystem(self, individual):
        return QSystem()

#Simple circuit builder takes dimensions for a single zxcgp instance
class Simple_Circuit_Builder(Individual_Builder):
    def __init__(self, inp, outp, width, height, in_arity, out_arity, max_complexity):
        self.inp = inp
        self.outp = outp
        self.width = width
        self.height = height
        self.in_arity = in_arity
        self.out_arity = out_arity
        self.max_complexity = max_complexity

    #Builds a single zxcgp instance and places it in an array
    def initialize_individual(self):
        return [ZX_CGP(self.inp, self.width, self.height, self.outp, self.in_arity, self.out_arity, self.max_complexity)]

    #Takes the first (only) zxcgp instance from an individual generated by this builder and returns its qsystem representation
    def build_qsystem(self, individual):
        return individual[0].generate_qsystem()

#Problem specific teleportation builder
class TP_Builder(Individual_Builder):
    #Entanglement circuit, alice circuit and bob circuit parameters passed
    def __init__(self, e_width, e_height, a_width, a_height, b_width, b_height, in_arity, out_arity, bonus_complexity):
        self.e_width = e_width
        self.e_height = e_height
        self.a_width = a_width
        self.a_height = a_height
        self.b_width = b_width
        self.b_height = b_height
        self.in_arity = in_arity
        self.out_arity = out_arity
        self.c = bonus_complexity

    def initialize_individual(self):
        ent = ZX_CGP(2, self.e_width, self.e_height, 2, self.in_arity, self.out_arity, 2 + self.c)
        a = ZX_CGP(2, self.a_width, self.a_height, 2, self.in_arity, self.out_arity, 2 + self.c)
        b = ZX_CGP(3, self.b_width, self.b_height, 3, self.in_arity, self.out_arity, 3 + self.c)
        return [ent, a, b]

    def build_qsystem(self, individual):
        ent_m = individual[0].generate_qsystem().compiled_system.get_layer(0)
        a_m = individual[1].generate_qsystem().compiled_system.get_layer(0)
        b_m = individual[2].generate_qsystem().compiled_system.get_layer(0)
        w = CMatrix([[1.0 + 0j, 0j],[0j, 1.0 + 0j]])
        q = QSystem()
        q.new_layer()
        q.add_operator(w)
        q.add_operator(ent_m)
        q.close_layer()
        q.new_layer()
        q.add_operator(a_m)
        q.add_operator(w)
        q.close_layer()
        q.add_measurement_layer([0, 1])
        q.new_layer()
        q.add_operator(b_m)
        q.close_layer()
        q.compile()
        return q

class Layered_Builder(Individual_Builder):
    def __init__(self, layers, inp, outp, width, height, in_arity, out_arity, max_complexity):
        self.layers = layers
        self.inp = inp
        self.outp = outp
        self.width = width
        self.height = height
        self.in_arity = in_arity
        self.out_arity = out_arity
        self.max_complexity = max_complexity

    #Builds a single zxcgp instance and places it in an array
    def initialize_individual(self):
        return [ZX_CGP(self.inp, self.width, self.height, self.outp, self.in_arity, self.out_arity, self.max_complexity) for x in range(self.layers)]

    #Takes the first (only) zxcgp instance from an individual generated by this builder and returns its qsystem representation
    def build_qsystem(self, individual):
        mN = individual[0].generate_qsystem().compiled_system.get_layer(0)
        for x in range(self.layers - 1):
            q = individual[x + 1].generate_qsystem()
            m = q.compiled_system.get_layer(0)
            mN = m * mN
        new_q = QSystem()
        new_q.new_layer()
        new_q.add_operator(mN)
        new_q.close_layer()
        new_q.compile()
            
        return new_q
    
